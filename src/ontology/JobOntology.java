// file: JobOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: JobOntology.java
 * @author ontology bean generator
 * @version 2022/05/18, 14:02:20
 */
public class JobOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -8993252316815084752L;

  //NAME
  public static final String ONTOLOGY_NAME = "Job";
  // The singleton instance of this ontology
  private static Ontology theInstance = new JobOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String ANSWERMSG_ACCEPTED="accepted";
    public static final String ANSWERMSG_ID="id";
    public static final String ANSWERMSG="AnswerMsg";
    public static final String ADDJOBMSG_DARBAS="darbas";
    public static final String ADDJOBMSG="AddJobMsg";
    public static final String APPLYMSG_ID="id";
    public static final String APPLYMSG_DARBUOTOJAS="darbuotojas";
    public static final String APPLYMSG="ApplyMsg";
    public static final String DARBUOTOJAS_PAVARDE="pavarde";
    public static final String DARBUOTOJAS_VARDAS="vardas";
    public static final String DARBUOTOJAS="Darbuotojas";
    public static final String DARBAS_PAVADINIMAS="pavadinimas";
    public static final String DARBAS_ATLYGINIMAS="atlyginimas";
    public static final String DARBAS_ID="id";
    public static final String DARBAS_PATIRTIS="patirtis";
    public static final String DARBAS="Darbas";

  /**
   * Constructor
  */
  private JobOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema darbasSchema = new ConceptSchema(DARBAS);
    add(darbasSchema, ontology.Darbas.class);
    ConceptSchema darbuotojasSchema = new ConceptSchema(DARBUOTOJAS);
    add(darbuotojasSchema, ontology.Darbuotojas.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema applyMsgSchema = new PredicateSchema(APPLYMSG);
    add(applyMsgSchema, ontology.ApplyMsg.class);
    PredicateSchema addJobMsgSchema = new PredicateSchema(ADDJOBMSG);
    add(addJobMsgSchema, ontology.AddJobMsg.class);
    PredicateSchema answerMsgSchema = new PredicateSchema(ANSWERMSG);
    add(answerMsgSchema, ontology.AnswerMsg.class);


    // adding fields
    darbasSchema.add(DARBAS_PATIRTIS, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    darbasSchema.add(DARBAS_ID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    darbasSchema.add(DARBAS_ATLYGINIMAS, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    darbasSchema.add(DARBAS_PAVADINIMAS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    darbuotojasSchema.add(DARBUOTOJAS_VARDAS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    darbuotojasSchema.add(DARBUOTOJAS_PAVARDE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    applyMsgSchema.add(APPLYMSG_DARBUOTOJAS, darbuotojasSchema, ObjectSchema.MANDATORY);
    applyMsgSchema.add(APPLYMSG_ID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    addJobMsgSchema.add(ADDJOBMSG_DARBAS, darbasSchema, ObjectSchema.MANDATORY);
    answerMsgSchema.add(ANSWERMSG_ID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    answerMsgSchema.add(ANSWERMSG_ACCEPTED, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
